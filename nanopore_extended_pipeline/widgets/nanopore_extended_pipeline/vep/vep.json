{"name": "vep", "description": "Ensembl Variant Event Predictor annotate SNVs", "docker_image_name": "ensemblorg/ensembl-vep", "docker_image_tag": "release_111.0", "priority": "10", "icon": null, "inputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["vcfFile", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["Trigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}]}]}, "outputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["outputFile", {"default": null, "type": {"py/type": "builtins.str"}}]}]}]}, "volumes": null, "ports": null, "parameters": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["forceOverwrite", {"flag": "--force ", "label": "Overwrite existing output file", "type": "bool"}]}, {"py/tuple": ["vcfFile", {"flag": "-i ", "label": "Input phased VCF file", "type": "file list"}]}, {"py/tuple": ["vcfOutEnable", {"flag": "--vcf ", "label": "Write output as VCF file", "type": "bool"}]}, {"py/tuple": ["bufferSize", {"default": 5000, "flag": "--buffer_size ", "label": "Internal buffer size", "type": "int"}]}, {"py/tuple": ["species", {"default": "homo_sapiens", "flag": "--species ", "label": "Species for your data (homo_sapiens, mouse, etc.)", "type": "str"}]}, {"py/tuple": ["fork", {"flag": "--fork ", "label": "Number of forks/threads", "type": "int"}]}, {"py/tuple": ["outputFile", {"flag": "-o ", "label": "Output txt file", "type": "file list"}]}, {"py/tuple": ["cache", {"flag": "--cache ", "label": "Enable cache", "type": "bool"}]}, {"py/tuple": ["mergedCache", {"flag": "--merged ", "label": "Enable merged cache (must also enable \"cache\" entry)", "type": "bool"}]}, {"py/tuple": ["offline", {"flag": "--offline ", "label": "Enable offline mode for cache", "type": "bool"}]}, {"py/tuple": ["dirCache", {"flag": "--dir_cache ", "label": "Cache directory (other than default)", "type": "directory"}]}, {"py/tuple": ["canonical", {"flag": "--canonical ", "label": "Add flag indicating if transcript is cannonical", "type": "bool"}]}, {"py/tuple": ["symbol", {"flag": "--symbol ", "label": "Add gene symbol to output", "type": "bool"}]}, {"py/tuple": ["numbers", {"flag": "--numbers ", "label": "Add affected exon and intron numbering to output", "type": "bool"}]}, {"py/tuple": ["assembly", {"default": "GRCh38", "flag": "--assembly ", "label": "Select assembly version if more than one available", "type": "str"}]}, {"py/tuple": ["useGivenRef", {"flag": "--use_given_ref ", "label": "Use reference allel from input", "type": "bool"}]}, {"py/tuple": ["pickAllele", {"flag": "--pick_allele ", "label": "Choose one line or block per variant allele", "type": "bool"}]}, {"py/tuple": ["domains", {"flag": "--domains ", "label": "Add names of overlapping protein domains to output", "type": "bool"}]}, {"py/tuple": ["pubmed", {"flag": "--pubmed ", "label": "Report Pubmed IDs for variants (must also enable \"cache\" entry)", "type": "bool"}]}, {"py/tuple": ["genePhenotype", {"flag": "--gene_phenotype ", "label": "Indicate if overlapped gene is phenotype, disease or trait", "type": "bool"}]}, {"py/tuple": ["sift", {"default": "b", "flag": "--sift ", "label": "Use SIFT (p, s, or b)", "type": "str"}]}, {"py/tuple": ["polyphen", {"default": "b", "flag": "--polyphen ", "label": "Use PolyPhen (p, s, or b)", "type": "str"}]}, {"py/tuple": ["regulatory", {"flag": "--regulatory ", "label": "Look for overlaps with regulatory regions", "type": "bool"}]}, {"py/tuple": ["totalLength", {"flag": "--total_length ", "label": "Give cDNA, CDS and protein positions at Position/Length", "type": "bool"}]}, {"py/tuple": ["af", {"flag": "--af ", "label": "Add global AF to output", "type": "bool"}]}, {"py/tuple": ["maxAf", {"flag": "--max_af ", "label": "Report highest AF", "type": "bool"}]}, {"py/tuple": ["afLkg", {"flag": "--af_lkg", "label": "Add AF from continental populations of 1000 Genomes Phase 3 to output", "type": "bool"}]}, {"py/tuple": ["customMultiAllelic", {"flag": "--custom_multi_allelic ", "label": "Instruct VEP to return all annotations for all alleles", "type": "bool"}]}, {"py/tuple": ["dirPlugins", {"flag": "--dir_plugins ", "label": "Plugin directory (other than default)", "type": "directory list"}]}, {"py/tuple": ["plugin", {"default": "--plugin SpliceVault ", "flag": null, "argument": true, "label": "VEP plugin(s) flag to use, pass arguments comma-separated after plugin (ex: --plugin SpliceVault --plugin SpliceAI,2,indel=indel.vcf)", "type": "str"}]}, {"py/tuple": ["customAnnotation", {"default": "--plugin SpliceVault ", "flag": null, "argument": true, "label": "Add custom annotation(s) to output as --custom, pass arguments comma-separated after file (--custom file=<file>,short_name=<\"Short_name\">,format=<file_type>,type=<annotation_type>,fields=<VCF_fields>)", "type": "str"}]}]}]}, "command": ["vep "], "autoMap": true, "runDockerMap": null, "nextFlowMap": null, "persistentSettings": "all", "requiredParameters": ["vcfFile", "vcfOutEnable", "species", "outputFile"]}